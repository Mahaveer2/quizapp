datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Admin {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  name          String?
  password      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userAuthToken String   @unique @default("")
  Test          Test[] // Many-to-many relationship
}

model Test {
  id        Int        @id @default(autoincrement())
  professor Admin      @relation(references: [id], fields: [profId], onDelete: Cascade)
  profId    Int        @default(1)
  name      String
  questions Question[]
  scores    Score[]
  shareLink String     @unique
}

model Question {
  id            Int    @id @default(autoincrement())
  questionText  String
  correctAnswer String
  marks         Int    @default(1)
  test          Test   @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId        Int
}

model Student {
  id            Int               @id @default(autoincrement())
  email         String            @unique
  firstName     String
  lastName      String
  scores        Score[]
  Chat          Chat?             @relation(fields: [chatId], references: [id])
  chatId        Int?
  password      String
  credits       Int               @default(0)
  verified      Boolean           @default(false)
  freeCredits   FreeCredits[]
  creditsUsed   CreditsUsed[]
  payments      PaymentSessions[]
  userAuthToken String            @unique @default("")
}

model FreeCredits {
  id        Int      @id @default(autoincrement())
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime @default(dbgenerated("(now() + INTERVAL 7 DAY)"))
}

model CreditsUsed {
  id        Int      @id @default(autoincrement())
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  shareLink String
  createdAt DateTime @default(now())
}

model PaymentSessions {
  id        Int      @id @default(autoincrement())
  paymentId String   @unique
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  createdAt DateTime @default(now())
}

model Score {
  id        Int     @id @default(autoincrement())
  score     Json
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  test      Test    @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId    Int
}

model Chat {
  id        Int       @id @default(autoincrement())
  student   Student[] 
  studentId Int
  prompt    String
  returnMsg String
}
